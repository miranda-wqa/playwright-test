# Using default github pages for deployment to pages
# Using Multiple workflow jobs
# main workflow

name: 🎭 Playwright Tests - 3

on:
  # push:
  #   branches: [main, master]
  # pull_request:
  #   branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write
  
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  tests:
    name: 🧪 Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      report_dir: ${{ steps.report-dir.outputs.name }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: ♻️ Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: ♻️ Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🌐 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run Playwright Tests
        run: npx playwright test --project=chromium -g "test-1.spec.ts"
        continue-on-error: true

      - name: 🖥️ 📑 Install and Publish CTRF Test Summary Results
        run: |
          npm install -g github-actions-ctrf
          github-actions-ctrf test-reports/ctrf-report.json
        if: always()
          
      - name: 🎭 Add Test Summary HTML Table
        if: always()
        run: node ./github-test-summary.js

      - name: 📁 Set Report Folder Name
        id: report-dir
        run: |
          REPORT_DIR=$(TZ="America/New_York" date +'%Y-%m-%d_%H-%M-%S')_${{ github.run_id }}
          echo "name=$REPORT_DIR" >> $GITHUB_OUTPUT

      - name: 📤 Package report
        run: |
          mkdir -p package/${{ steps.report-dir.outputs.name }}
          cp -r test-reports/monocart/* package/${{ steps.report-dir.outputs.name }} || echo "No reports to copy"
        
      - name: 📦 Upload Report Artifact
        uses: actions/upload-artifact@v4
        if: hashFiles('package/**/*') != ''
        with:
          name: report-folder
          path: package/
          retention-days: 1
          if-no-files-found: warn

  deploy:
    name: 🚀 Deploy Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: tests
    if: needs.tests.outputs.report_dir != ''
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📦 Download Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: report-folder
          path: ./public

      - name: 📑 Generate index page
        env:
          REPORT_DIR: ${{ needs.tests.outputs.report_dir }}
        run: |
          cd public
      
          # Create new report item
          NEW_ITEM="<li><a href='./${REPORT_DIR}/index.html'>Run: ${REPORT_DIR} <span class=\"date\">Generated on $(TZ=\"America/New_York\" date '+%A, %B %d, %Y at %I:%M %p')</span></a></li>"
      
          # Extract old items, skip duplicates of current report
          if [[ -f index.html ]]; then
            grep '<li><a href=' index.html | grep -v "./${REPORT_DIR}/index.html" > old-items.txt || true
          else
            touch old-items.txt
          fi
      
          # Create new index file
          {
            echo "<html><body><h1>Test Reports</h1><ul>"
            echo "$NEW_ITEM"
            cat old-items.txt | head -n 99  # Only keep the most recent 99 after the new one
            echo "</ul></body></html>"
          } > index.html
  
      - name: 📦 Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🔗 Add report URL to summary
        run: |
          echo "## ✅ Test Report Available" >> $GITHUB_STEP_SUMMARY
          echo "[Open Latest Report 🔍](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ needs.tests.outputs.report_dir }}/)" >> $GITHUB_STEP_SUMMARY
          echo "[View All Reports](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
