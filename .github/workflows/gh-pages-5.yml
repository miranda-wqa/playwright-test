name: Deploy Test Reports to GitHub Pages

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

jobs:
  deploy-reports:
    runs-on: ubuntu-latest
    steps:
      # Basic checkout - this action has been confirmed to work
      - uses: actions/checkout@v4
      
      # Setup GitHub Pages - this action has been confirmed to work
      - uses: actions/configure-pages@v4
      
      # Build the reports site without using problematic actions
      - name: Build site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Create site directory
          mkdir -p _site
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          
          # Fetch artifacts data using "magic sauce" with slight modification for your artifact name
          echo "Fetching artifacts data..."
          gh api --paginate "/repos/$REPO/actions/artifacts" > raw_artifacts.json
          
          # Process the data with jq
          cat raw_artifacts.json | jq -s '[.[].artifacts[] | select((.name=="report-folder") and (.expired==false))]' > filtered_artifacts.json
          cat filtered_artifacts.json | jq 'sort_by(.created_at) | reverse | .[0:50]' > latest_artifacts.json
          cat latest_artifacts.json | jq 'group_by(.workflow_run.head_branch)' > grouped_artifacts.json
          
          # Transform to the desired structure as mentioned by your lead
          cat grouped_artifacts.json | jq '[.[] | {
            branch: .[0].workflow_run.head_branch,
            workflow_runs: [.[] | {
              workflow_run_id: .workflow_run.id,
              created_at: .created_at,
              artifact_id: .id
            }]
          }]' > _site/report_structure.json
          
          # Download artifacts and organize by branch/timestamp
          echo "Downloading artifacts..."
          jq -c '.[]' _site/report_structure.json | while read -r branch_data; do
            branch_name=$(echo $branch_data | jq -r '.branch')
            mkdir -p "_site/$branch_name"
            
            echo "Processing branch: $branch_name"
            
            echo $branch_data | jq -c '.workflow_runs[]' | while read -r run_data; do
              run_id=$(echo $run_data | jq -r '.workflow_run_id')
              artifact_id=$(echo $run_data | jq -r '.artifact_id')
              created_at=$(echo $run_data | jq -r '.created_at' | sed 's/:/-/g' | sed 's/Z$//')
              
              # Create directory with timestamp_runid format
              dir_name="${created_at}_${run_id}"
              mkdir -p "_site/$branch_name/$dir_name"
              
              echo "Downloading artifact $artifact_id for run $run_id"
              
              # Download the artifact
              gh api "/repos/$REPO/actions/artifacts/$artifact_id/zip" \
                -H "Accept: application/vnd.github+json" \
                --output "artifact.zip"
              
              # Extract to the correct location
              unzip -q -o "artifact.zip" -d "_site/$branch_name/$dir_name"
              rm "artifact.zip"
            done
          done
          
          # Create an index.html file
          cat > _site/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Test Reports</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 {
                color: #0366d6;
                text-align: center;
                margin-bottom: 30px;
              }
              .branch-section {
                margin-bottom: 30px;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                overflow: hidden;
              }
              .branch-header {
                background-color: #f6f8fa;
                padding: 10px 15px;
                font-weight: bold;
                border-bottom: 1px solid #e1e4e8;
              }
              .run-item {
                padding: 10px 15px;
                border-bottom: 1px solid #e1e4e8;
                display: flex;
                justify-content: space-between;
              }
              .run-item:last-child {
                border-bottom: none;
              }
              .run-link {
                color: #0366d6;
                text-decoration: none;
              }
              .run-link:hover {
                text-decoration: underline;
              }
              .timestamp {
                color: #586069;
                font-size: 0.9em;
              }
            </style>
          </head>
          <body>
            <h1>Test Reports</h1>
            <div id="dashboard">Loading reports...</div>
            
            <script>
              // Load the report structure
              fetch('./report_structure.json')
                .then(response => response.json())
                .then(data => {
                  const dashboard = document.getElementById('dashboard');
                  dashboard.innerHTML = '';
                  
                  // Process each branch
                  data.forEach(branch => {
                    const section = document.createElement('div');
                    section.className = 'branch-section';
                    
                    const header = document.createElement('div');
                    header.className = 'branch-header';
                    header.textContent = branch.branch || 'Unknown Branch';
                    
                    section.appendChild(header);
                    
                    // Add each run
                    branch.workflow_runs.forEach(run => {
                      const runItem = document.createElement('div');
                      runItem.className = 'run-item';
                      
                      const runLink = document.createElement('a');
                      runLink.href = `${branch.branch}/${run.created_at.replace(/:/g, '-').replace(/Z$/, '')}_${run.workflow_run_id}/`;
                      runLink.className = 'run-link';
                      runLink.textContent = `Run ID: ${run.workflow_run_id}`;
                      
                      const timestamp = document.createElement('span');
                      timestamp.className = 'timestamp';
                      timestamp.textContent = new Date(run.created_at).toLocaleString();
                      
                      runItem.appendChild(runLink);
                      runItem.appendChild(timestamp);
                      section.appendChild(runItem);
                    });
                    
                    dashboard.appendChild(section);
                  });
                })
                .catch(error => {
                  document.getElementById('dashboard').innerHTML = 
                    `<div style="color: red; text-align: center;">
                      Error loading reports: ${error.message}
                    </div>`;
                });
            </script>
          </body>
          </html>
          EOL
          
          # Print the files we created
          echo "Created site structure:"
          find _site -type d | sort
      
      # Use the upload-pages-artifact action that has worked for you
      - uses: actions/upload-pages-artifact@v2
      
      # Deploy the site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        with:
          preview: ${{ github.event_name != 'workflow_run' }} 
