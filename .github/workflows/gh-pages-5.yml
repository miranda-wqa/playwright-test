name: Deploy Acceptance Test Reports

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

jobs:
  deploy-reports:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
    
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Install jq
        run: sudo apt-get install jq -y
    
      - name: Fetch and Transform Artifacts Data
        id: fetch-artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Create the directory for the site
          mkdir -p _site
          
          # Fetch the latest non-expired artifacts named 'report-folder'
          # This uses the "magic sauce" jq command your lead provided, slightly modified for the correct artifact name
          gh api --paginate "/repos/$REPO/actions/artifacts?per_page=100" | \
          jq -s '[.[].artifacts[] | select((.name=="report-folder") and (.expired==false))]' > all_artifacts.json
          
          # Limit to the latest 50 artifacts
          jq 'sort_by(.created_at) | reverse | .[0:50]' all_artifacts.json > latest_artifacts.json
          
          # Group by branch and sort as specified
          jq 'group_by(.workflow_run.head_branch) | sort_by(.[].id) | reverse' latest_artifacts.json > grouped_artifacts.json
          
          # Now transform to the desired structure that your lead wanted
          jq '[.[] | {
            branch: .[0].workflow_run.head_branch,
            workflow_runs: [.[] | {
              workflow_run_id: .workflow_run.id,
              created_at: .created_at,
              run_number: .workflow_run.run_number,
              artifact_id: .id
            }]
          }]' grouped_artifacts.json > _site/report_structure.json
          
          # Create a pretty version for debugging
          jq '.' _site/report_structure.json > _site/report_structure_pretty.json
          
          # Output the structure to the logs for debugging
          echo "Transformed data structure:"
          cat _site/report_structure_pretty.json
    
      - name: Download Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Process each branch and its workflow runs
          jq -c '.[]' _site/report_structure.json | while read -r branch_data; do
            branch_name=$(echo $branch_data | jq -r '.branch')
            mkdir -p "_site/$branch_name"
            
            echo "Processing branch: $branch_name"
            
            # Process each workflow run in the branch
            echo $branch_data | jq -c '.workflow_runs[]' | while read -r run_data; do
              run_id=$(echo $run_data | jq -r '.workflow_run_id')
              artifact_id=$(echo $run_data | jq -r '.artifact_id')
              created_at=$(echo $run_data | jq -r '.created_at' | sed 's/:/-/g' | sed 's/Z$//')
              
              # Create directory using timestamp_runid format
              dir_name="${created_at}_${run_id}"
              mkdir -p "_site/$branch_name/$dir_name"
              
              echo "Downloading artifact $artifact_id for run $run_id on branch $branch_name"
              
              # Download and extract the artifact
              gh api "/repos/$REPO/actions/artifacts/$artifact_id/zip" \
                -H "Accept: application/vnd.github+json" \
                --output "artifact.zip"
              
              unzip -q -o "artifact.zip" -d "_site/$branch_name/$dir_name"
              rm "artifact.zip"
              
              echo "Extracted artifact to _site/$branch_name/$dir_name"
            done
          done
    
      - name: Generate Index HTML
        run: |
          cat > _site/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Test Report Dashboard</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 {
                text-align: center;
                margin-bottom: 30px;
                color: #0366d6;
              }
              h2 {
                color: #0366d6;
                border-bottom: 1px solid #e1e4e8;
                padding-bottom: 8px;
              }
              .branch-section {
                margin-bottom: 40px;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                overflow: hidden;
              }
              .branch-header {
                background-color: #f6f8fa;
                padding: 12px 15px;
                font-weight: bold;
                font-size: 1.1em;
                border-bottom: 1px solid #e1e4e8;
                cursor: pointer;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              .branch-content {
                padding: 0;
                max-height: 500px;
                overflow-y: auto;
              }
              .run-item {
                padding: 12px 15px;
                border-bottom: 1px solid #e1e4e8;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              .run-item:last-child {
                border-bottom: none;
              }
              .run-item:hover {
                background-color: #f6f8fa;
              }
              .run-link {
                color: #0366d6;
                text-decoration: none;
                flex-grow: 1;
              }
              .run-link:hover {
                text-decoration: underline;
              }
              .timestamp {
                color: #586069;
                font-size: 0.9em;
                margin-right: 10px;
                white-space: nowrap;
              }
              .count-badge {
                background-color: #0366d6;
                color: white;
                border-radius: 10px;
                padding: 2px 8px;
                font-size: 0.8em;
              }
              .collapsed .branch-content {
                display: none;
              }
              .loading {
                text-align: center;
                padding: 40px;
                font-size: 1.2em;
                color: #586069;
              }
              .chevron {
                transition: transform 0.3s;
                margin-left: 8px;
              }
              .collapsed .chevron {
                transform: rotate(-90deg);
              }
            </style>
          </head>
          <body>
            <h1>Test Report Dashboard</h1>
            <div id="dashboard">
              <div class="loading">Loading reports...</div>
            </div>
            
            <script>
              // Fetch the report structure JSON
              fetch('./report_structure.json')
                .then(response => response.json())
                .then(data => {
                  const dashboard = document.getElementById('dashboard');
                  dashboard.innerHTML = ''; // Clear loading message
                  
                  if (data.length === 0) {
                    dashboard.innerHTML = '<div class="loading">No reports found</div>';
                    return;
                  }
                  
                  // Create sections for each branch
                  data.forEach(branchData => {
                    const branchSection = document.createElement('div');
                    branchSection.className = 'branch-section';
                    
                    // Create header for the branch
                    const branchHeader = document.createElement('div');
                    branchHeader.className = 'branch-header';
                    
                    const nameSpan = document.createElement('span');
                    nameSpan.textContent = branchData.branch;
                    
                    const countBadge = document.createElement('span');
                    countBadge.className = 'count-badge';
                    countBadge.textContent = branchData.workflow_runs.length;
                    
                    const chevron = document.createElement('span');
                    chevron.className = 'chevron';
                    chevron.innerHTML = 'â–¼';
                    
                    const headerInfo = document.createElement('div');
                    headerInfo.appendChild(nameSpan);
                    headerInfo.appendChild(document.createTextNode(' '));
                    headerInfo.appendChild(countBadge);
                    
                    branchHeader.appendChild(headerInfo);
                    branchHeader.appendChild(chevron);
                    
                    branchHeader.addEventListener('click', () => {
                      branchSection.classList.toggle('collapsed');
                    });
                    
                    // Create content container for the runs
                    const branchContent = document.createElement('div');
                    branchContent.className = 'branch-content';
                    
                    // Add each run as a list item
                    branchData.workflow_runs.forEach(run => {
                      const runItem = document.createElement('div');
                      runItem.className = 'run-item';
                      
                      // Format the timestamp
                      const timestamp = new Date(run.created_at);
                      const formattedDate = timestamp.toLocaleDateString();
                      const formattedTime = timestamp.toLocaleTimeString();
                      
                      // Create the URL path from branch name and run id
                      const reportPath = `${branchData.branch}/${run.created_at.replace(/:/g, '-').replace(/Z$/, '')}_${run.workflow_run_id}/`;
                      
                      const runLink = document.createElement('a');
                      runLink.href = reportPath;
                      runLink.className = 'run-link';
                      runLink.textContent = `Run #${run.run_number} (ID: ${run.workflow_run_id})`;
                      
                      const timeSpan = document.createElement('span');
                      timeSpan.className = 'timestamp';
                      timeSpan.textContent = `${formattedDate} ${formattedTime}`;
                      
                      runItem.appendChild(runLink);
                      runItem.appendChild(timeSpan);
                      
                      branchContent.appendChild(runItem);
                    });
                    
                    // Assemble the branch section
                    branchSection.appendChild(branchHeader);
                    branchSection.appendChild(branchContent);
                    dashboard.appendChild(branchSection);
                  });
                })
                .catch(error => {
                  console.error('Error loading report structure:', error);
                  document.getElementById('dashboard').innerHTML = `
                    <div style="color: red; text-align: center; padding: 40px;">
                      <p>Error loading report data. Please try again later.</p>
                      <p>Details: ${error.message}</p>
                    </div>
                  `;
                });
            </script>
          </body>
          </html>
          EOL
    
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy-reports
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
