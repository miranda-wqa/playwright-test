name: Deploy Acceptance Test Reports

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

jobs:
  deploy-reports:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
    
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
    
      - name: Fetch Artifacts Data
        id: fetch-artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Fetch the latest 50 non-expired artifacts named 'report-folder'
          gh api --paginate "/repos/$REPO/actions/artifacts?per_page=100" | \
          jq -s '[.[].artifacts[] 
            | select((.name=="report-folder") and (.expired==false))] 
            | sort_by(.created_at) 
            | reverse 
            | .[0:50] 
            | group_by(.workflow_run.head_branch)' > artifacts.json
          
          # Transform the data to the desired structure
          jq '[.[] | {
            branch: .[0].workflow_run.head_branch,
            workflow_runs: [.[] | {
              workflow_run_id: .workflow_run.id,
              run_number: .workflow_run.run_number,
              created_at: .created_at,
              artifact_id: .id
            }]
          }]' artifacts.json > report_structure.json
          
          mkdir -p _site
          cp report_structure.json _site/
    
      - name: Download Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p _site
          
          # Process each artifact and download it
          jq -c '.[]' report_structure.json | while read -r branch_data; do
            branch_name=$(echo $branch_data | jq -r '.branch')
            mkdir -p "_site/$branch_name"
            
            echo $branch_data | jq -c '.workflow_runs[]' | while read -r run_data; do
              run_id=$(echo $run_data | jq -r '.workflow_run_id')
              artifact_id=$(echo $run_data | jq -r '.artifact_id')
              created_at=$(echo $run_data | jq -r '.created_at' | sed 's/:/-/g' | sed 's/Z$//')
              
              dir_name="${created_at}_${run_id}"
              mkdir -p "_site/$branch_name/$dir_name"
              
              # Download the artifact
              echo "Downloading artifact $artifact_id for run $run_id on branch $branch_name"
              gh api "/repos/$REPO/actions/artifacts/$artifact_id/zip" -H "Accept: application/vnd.github+json" --output "artifact.zip"
              
              # Extract the artifact to the designated directory
              unzip -q -o "artifact.zip" -d "_site/$branch_name/$dir_name"
              rm "artifact.zip"
            done
          done
    
      - name: Generate Index.html
        run: |
          cat > _site/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Test Report Dashboard</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 {
                text-align: center;
                margin-bottom: 30px;
                color: #0366d6;
              }
              .branch-section {
                margin-bottom: 30px;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                overflow: hidden;
              }
              .branch-header {
                background-color: #f6f8fa;
                padding: 10px 15px;
                font-weight: bold;
                border-bottom: 1px solid #e1e4e8;
                cursor: pointer;
                display: flex;
                justify-content: space-between;
              }
              .branch-content {
                padding: 0;
                max-height: 500px;
                overflow-y: auto;
              }
              .run-item {
                padding: 12px 15px;
                border-bottom: 1px solid #e1e4e8;
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              .run-item:last-child {
                border-bottom: none;
              }
              .run-item:hover {
                background-color: #f6f8fa;
              }
              .run-link {
                color: #0366d6;
                text-decoration: none;
                flex-grow: 1;
              }
              .run-link:hover {
                text-decoration: underline;
              }
              .timestamp {
                color: #586069;
                font-size: 0.9em;
                margin-right: 10px;
              }
              .count-badge {
                background-color: #0366d6;
                color: white;
                border-radius: 10px;
                padding: 2px 8px;
                font-size: 0.8em;
              }
              .collapsed .branch-content {
                display: none;
              }
            </style>
          </head>
          <body>
            <h1>Test Report Dashboard</h1>
            <div id="dashboard"></div>
            
            <script>
              // Fetch the report structure JSON
              fetch('./report_structure.json')
                .then(response => response.json())
                .then(data => {
                  const dashboard = document.getElementById('dashboard');
                  
                  // Create sections for each branch
                  data.forEach(branchData => {
                    const branchSection = document.createElement('div');
                    branchSection.className = 'branch-section';
                    
                    // Create header for the branch
                    const branchHeader = document.createElement('div');
                    branchHeader.className = 'branch-header';
                    branchHeader.innerHTML = `
                      <span>${branchData.branch}</span>
                      <span class="count-badge">${branchData.workflow_runs.length}</span>
                    `;
                    branchHeader.addEventListener('click', () => {
                      branchSection.classList.toggle('collapsed');
                    });
                    
                    // Create content container for the runs
                    const branchContent = document.createElement('div');
                    branchContent.className = 'branch-content';
                    
                    // Add each run as a list item
                    branchData.workflow_runs.forEach(run => {
                      const runItem = document.createElement('div');
                      runItem.className = 'run-item';
                      
                      // Format the timestamp
                      const timestamp = new Date(run.created_at);
                      const formattedDate = timestamp.toLocaleDateString();
                      const formattedTime = timestamp.toLocaleTimeString();
                      
                      // Create the URL path from branch name and run id
                      const reportPath = `${branchData.branch}/${run.created_at.replace(/:/g, '-').replace(/Z$/, '')}_${run.workflow_run_id}/`;
                      
                      runItem.innerHTML = `
                        <a href="${reportPath}" class="run-link">
                          Run #${run.run_number} (ID: ${run.workflow_run_id})
                        </a>
                        <span class="timestamp">${formattedDate} ${formattedTime}</span>
                      `;
                      
                      branchContent.appendChild(runItem);
                    });
                    
                    // Assemble the branch section
                    branchSection.appendChild(branchHeader);
                    branchSection.appendChild(branchContent);
                    dashboard.appendChild(branchSection);
                  });
                })
                .catch(error => {
                  console.error('Error loading report structure:', error);
                  document.getElementById('dashboard').innerHTML = `
                    <div style="color: red; text-align: center;">
                      <p>Error loading report data. Please try again later.</p>
                      <p>Details: ${error.message}</p>
                    </div>
                  `;
                });
            </script>
          </body>
          </html>
          EOL
    
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy-reports
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
