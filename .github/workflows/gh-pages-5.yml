name: Manual Test Reports Deployment

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main

# Grant permissions
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        run: |
          # Create directories needed
          mkdir -p site_content
          cd site_content
          
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y jq unzip curl
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
          
          # Get the repo info
          REPO="${GITHUB_REPOSITORY}"
          
          # Fetch artifacts data
          echo "Fetching artifacts..."
          gh api --paginate "/repos/${REPO}/actions/artifacts" > artifacts_raw.json
          
          # Process artifacts data
          jq -s '[.[].artifacts[] | select((.name=="report-folder") and (.expired==false))]' artifacts_raw.json > artifacts_filtered.json
          jq 'sort_by(.created_at) | reverse | .[0:50]' artifacts_filtered.json > artifacts_latest.json
          jq 'group_by(.workflow_run.head_branch) | sort_by(.[].id) | reverse' artifacts_latest.json > artifacts_grouped.json
          
          # Create desired structure
          jq '[.[] | {
            branch: .[0].workflow_run.head_branch,
            workflow_runs: [.[] | {
              workflow_run_id: .workflow_run.id,
              created_at: .created_at,
              artifact_id: .id
            }]
          }]' artifacts_grouped.json > report_structure.json
          
          # Make a minimal HTML page
          cat > index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head><title>Test Reports</title></head>
          <body>
            <h1>Test Reports</h1>
            <div id="reports">Loading...</div>
            <script>
              fetch('./report_structure.json')
                .then(response => response.json())
                .then(data => {
                  let html = '';
                  data.forEach(branch => {
                    html += `<h2>Branch: ${branch.branch}</h2><ul>`;
                    branch.workflow_runs.forEach(run => {
                      const date = new Date(run.created_at).toLocaleString();
                      html += `<li><a href="${branch.branch}/${run.created_at.replace(/:/g, '-').replace(/Z$/, '')}_${run.workflow_run_id}/">Run ID: ${run.workflow_run_id} (${date})</a></li>`;
                    });
                    html += '</ul>';
                  });
                  document.getElementById('reports').innerHTML = html;
                })
                .catch(e => {
                  document.getElementById('reports').innerHTML = 'Error loading reports: ' + e;
                });
            </script>
          </body>
          </html>
          EOL
          
          # Download artifacts to appropriate directories
          while read -r branch_data; do
            branch_name=$(echo "$branch_data" | jq -r '.branch')
            mkdir -p "$branch_name"
            
            echo "Processing branch: $branch_name"
            
            while read -r run_data; do
              run_id=$(echo "$run_data" | jq -r '.workflow_run_id')
              artifact_id=$(echo "$run_data" | jq -r '.artifact_id')
              created_at=$(echo "$run_data" | jq -r '.created_at' | sed 's/:/-/g' | sed 's/Z$//')
              
              dir_name="${created_at}_${run_id}"
              mkdir -p "${branch_name}/${dir_name}"
              
              echo "Downloading artifact $artifact_id"
              
              # FIX: Use curl instead of gh api with --output
              curl -L -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${REPO}/actions/artifacts/${artifact_id}/zip" \
                --output artifact.zip
              
              unzip -q -o artifact.zip -d "${branch_name}/${dir_name}"
              rm artifact.zip
            done < <(echo "$branch_data" | jq -c '.workflow_runs[]')
          done < <(jq -c '.[]' report_structure.json)
          
          # List files for debugging
          echo "Site structure:"
          find . -type d | sort
          
          # Create tarball for deployment
          tar -czf ../site.tar.gz *
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure and deploy Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: site.tar.gz
          
      - name: Deploy to GitHub Pages  
        uses: actions/deploy-pages@v3
        