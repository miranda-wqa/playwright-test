name: Deploy Reports Index to Pages

on:
  workflow_dispatch:
#   push:
#     branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Fetch specific artifacts from workflow runs
        id: fetch-artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          # Specify the target artifact name here
          TARGET_ARTIFACT_NAME: "report-folder"  # Change this to your specific artifact name
        run: |
          # Create directory for site content
          mkdir -p _site
          
          # Get repository info
          REPO="${GITHUB_REPOSITORY}"
          
          # Get all workflow runs
          echo "Fetching workflow runs..."
          RUNS=$(gh api "/repos/${REPO}/actions/runs" \
                --paginate -q '.workflow_runs[] | select(.conclusion=="success") | {id: .id, name: .name, created_at: .created_at, html_url: .html_url}')
          
          # Start the HTML file
          cat > _site/index.html << EOL
          <!DOCTYPE html>
          <html>
          <head>
            <title>Reports Index</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              table { width: 100%; border-collapse: collapse; }
              th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <h1>Reports Index</h1>
            <p>List of all available "${TARGET_ARTIFACT_NAME}" reports:</p>
            <table>
              <tr>
                <th>Report Date</th>
                <th>Run ID</th>
                <th>Link</th>
              </tr>
          EOL
          
          # For each run, look for the specific artifact
          echo "Processing runs and looking for ${TARGET_ARTIFACT_NAME} artifacts..."
          echo "$RUNS" | jq -c '.' | while read -r RUN; do
            RUN_ID=$(echo "$RUN" | jq -r '.id')
            CREATED_AT=$(echo "$RUN" | jq -r '.created_at' | cut -d'T' -f1)
            HTML_URL=$(echo "$RUN" | jq -r '.html_url')
            
            echo "Processing run $RUN_ID from $CREATED_AT"
            
            # Get artifacts for this run
            # Store the JSON output in a file for better handling
            gh api "/repos/${REPO}/actions/runs/${RUN_ID}/artifacts" > artifacts.json
            
            # Check if our target artifact exists
            TARGET_ARTIFACT=$(jq -c ".artifacts[] | select(.name == \"${TARGET_ARTIFACT_NAME}\")" artifacts.json)
            
            # Only process if the target artifact exists
            if [ ! -z "$TARGET_ARTIFACT" ]; then
              echo "Found ${TARGET_ARTIFACT_NAME} artifact for run $RUN_ID"
              
              # Extract artifact details
              ARTIFACT_ID=$(echo "$TARGET_ARTIFACT" | jq -r '.id')
              ARTIFACT_URL=$(echo "$TARGET_ARTIFACT" | jq -r '.archive_download_url')
              
              # Create directory for this report
              FOLDER_NAME="$(TZ="America/New_York" date -d "$CREATED_AT" +'%Y-%m-%d_%H-%M-%S')_${RUN_ID}"
                REPORT_DIR="_site/reports/${FOLDER_NAME}"
                mkdir -p "$REPORT_DIR"
              
              # Download the artifact
              echo "Downloading artifact ID: $ARTIFACT_ID"
              gh api "$ARTIFACT_URL" --method GET > "artifact.zip" || {
                echo "Failed to download artifact $ARTIFACT_ID"
                continue
              }
              
              # Extract the artifact
              if [ -f "artifact.zip" ]; then
                echo "Extracting artifact to $REPORT_DIR"
                unzip -o "artifact.zip" -d "$REPORT_DIR" || echo "Failed to extract artifact"
                rm "artifact.zip"
                
                # Add this run to the index
                REPORT_URL="./reports/${FOLDER_NAME}"
                cat >> _site/index.html << EOL
                <tr>
                  <td>${CREATED_AT}</td>
                  <td><a href="${HTML_URL}" target="_blank">${RUN_ID}</a></td>
                  <td><a href="${REPORT_URL}" target="_blank">View Report</a></td>
                </tr>
          EOL
              else
                echo "No artifact file found to extract"
              fi
            else
              echo "No ${TARGET_ARTIFACT_NAME} artifact found for run $RUN_ID"
            fi
          done
          
          # Clean up
          [ -f artifacts.json ] && rm artifacts.json
          
          # Finish the HTML file
          cat >> _site/index.html << EOL
            </table>
          </body>
          </html>
          EOL

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    name: ðŸ“¬ Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
    steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4
        